datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  //previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}


model Account {
  id                        String  @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?  @db.Text
  access_token              String?  @db.Text
  expires_at                Int?
  refresh_token_expires_in  Int?
  token_type                String?
  scope                     String?
  id_token                  String?  @db.Text
  session_state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String? @default("")
  firstName     String?
  lastName      String?
  mobileNumber  String?
  instrumentsList String[] 
  profileText String?
  bulletinsAuthored     Bulletin[]
  blockedUsers BlockUser[] @relation("blockedUser")
  blockedBy BlockUser[] @relation("blockedBy")
  preferredMethod String?
  fixingEnsembles String[]
  accounts      Account[]
  sessions      Session[]
  quickFixes    QuickFix[]
  events        Event[]
  playerCalls   PlayerCall[]
  calls         Call[]
  ensembles EnsembleMember[]
  extraWork EnsembleExtra[]
  admins EnsembleAdmin[]
}

model BlockUser {
  blockedBy User @relation("blockedBy", fields: [blockedById], references: [id])
  blockedById String
  blockedUser User @relation("blockedUser", fields: [blockedUserId], references: [id])
  blockedUserId String

  @@id([blockedById, blockedUserId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuickFix {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  content      String
  fixer        User    @relation(fields: [fixerEmail], references: [email])
  fixerEmail   String
}

model Event {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  ensembleId         String
  ensemble           Ensemble @relation(fields: [ensembleId], references: [id])
  eventTitle         String @default("")
  concertProgram     String
  confirmedOrOnHold  String @default("On Hold")
  calls              Call[]
  dressCode          String
  fee                String
  additionalInfo     String?
  instrumentSections EventInstrument[]
  //fixerEmail         String
  fixerId            String
  fixer              User     @relation(fields: [fixerId], references: [id])
  fixerName          String?
  //fixer              User     @relation(fields: [fixerEmail], references: [email])
}

model Call {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  startTime          DateTime
  endTime            DateTime
  venue              String
  eventId            Int 
  event              Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  //fixerEmail         String
  //fixer              User     @relation(fields: [fixerEmail], references: [email])
  fixerId           String
  fixer              User     @relation(fields: [fixerId], references: [id])
  playerCalls        PlayerCall[]
}

model EventInstrument {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  event              Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId            Int 
  instrumentName     String
  fixerNote          String?
  messageToAll       String?
  bookingStatus      String @default("active")
  musicians          PlayerCall[]
  numToBook          Int @default(0)
  callOrder          String @default("Ordered")
}


//model EventSection {
  //id                 Int      @id @default(autoincrement())
  //createdAt          DateTime @default(now())
  //updatedAt          DateTime @updatedAt
  //event              Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  //eventId            Int 
  //ensembleSectionId  String
  //ensembleSection   EnsembleSection @relation(fields: [ensembleSectionId], references: [id], onDelete: Cascade)
  //bookingStatus      String @default("active")
  //musicians          PlayerCall[]
  //numToBook          Int 
//}

model PlayerCall {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  eventInstrument    EventInstrument     @relation(fields: [eventInstrumentId], references: [id], onDelete: Cascade)
  musician           User     @relation(fields: [musicianId], references: [id])
  recieved           Boolean @default(false)
  accepted           Boolean? 
  musicianId         String //@default("clg6usgbg0000l80846i92lbb")
  eventInstrumentId  Int
  playerMessage      String?
  calls             Call[]
  bookingOrAvailability String @default ("Booking")
  offerExpiry       Int?
  status            String @default("OK") // 
}

model Ensemble {
  name String @unique
  id String @id @default(cuid())
  sections EnsembleSection[]
  admin EnsembleAdmin[]
  events Event[]
}

model EnsembleAdmin {
  id String @id @default(cuid())
  ensembleId String
  userId String 
  ensemble Ensemble @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  positionTitle String
  user User @relation(fields: [userId], references: [id])
}

model EnsembleSection {
  id String @id @default(cuid())
  name String
  ensembleId String
  ensemble Ensemble @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  members EnsembleMember[]
  extras EnsembleExtra[]
  bulletins Bulletin[]
}

model EnsembleMember {
  id String @id @default(cuid())
  ensembleId String
  userId String 
  positionNumber String
  positionTitle String
  sectionId String
  section EnsembleSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model EnsembleExtra {
  id String @id @default(cuid())
  ensembleId String
  userId String 
  positionNumber String
  positionTitle String
  sectionId String
  section EnsembleSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model Bulletin {
  id String @id @default(cuid())
  title String
  body String
  date DateTime @default(now())
  sections EnsembleSection[]
  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}