generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String          @id @default(cuid())
  email           String?         @unique
  emailVerified   DateTime?
  // mobileVerified DateTime
  firstName       String?
  lastName        String?
  mobileNumber    String?
  fixingEnsembles String[] //
  instrumentsList String[] //
  preferredMethod String? //
  name            String? //
  image           String? //
  accounts        Account[]
  calls           Call[]
  admins          EnsembleAdmin[]
  events          Event[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id                Int            @id @default(autoincrement())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  additionalInfo    String?
  concertProgram    String
  dressCode         String
  fee               String
  status            EventStatus         @default(ONHOLD)
  eventTitle        String
  fixerId           String
  fixerName         String?
  ensembleId        String
  ensembleName      String
  calls             Call[]
  ensemble          Ensemble       @relation(fields: [ensembleId], references: [id])
  fixer             User           @relation(fields: [fixerId], references: [id])
  sections          EventSection[]
  sentEmails        SentEmail[]
  adminAccess       String[]
}

enum EventStatus {
  CONFIRMED
  ONHOLD
}

model Call {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  venue           String
  eventId         Int
  endTime         DateTime
  startTime       DateTime
  fixerId         String
  event           Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  fixer           User             @relation(fields: [fixerId], references: [id])
  //contactMessages ContactMessage[] @relation("CallToContactMessage")
  contactEventCalls ContactEventCall[]
  orchestration   Orchestration[]  
}

model Orchestration {
  id          Int     @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  callId      Int
  eventSectionId Int
  eventSection  EventSection @relation(fields: [eventSectionId], references: [id], onDelete: Cascade)
  numRequired Int     
  bookedPlayers ContactMessage[]
  call        Call    @relation(fields: [callId], references: [id], onDelete: Cascade)
}

model EventSection {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  eventId           Int
  ensembleSectionId String
  bookingStatus     BookingStatus           @default(INACTIVE)
  orchestration     Orchestration[]
  contacts          ContactMessage[]
  ensembleSection   EnsembleSection  @relation(fields: [ensembleSectionId], references: [id], onDelete: Cascade)
  event             Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  ACTIVE
  INACTIVE
}

model ContactMessage {
  id                    Int             @id @default(autoincrement())
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  acceptedDate          DateTime?
  contactId             String
  playerMessage         String?
  eventSectionId        Int
  indexNumber           Int
  offerExpiry           Int?
  position              String          @default("Tutti")
  token                 String          @unique @default(cuid())
  strictlyTied          Boolean         @default(true)
  urgent                Boolean         @default(false)
  receivedDate          DateTime?
  contact               EnsembleContact @relation(fields: [contactId], references: [id])
  eventSection          EventSection    @relation(fields: [eventSectionId], references: [id], onDelete: Cascade)
  //calls                 Call[]          @relation("CallToContactMessage")
  eventCalls            ContactEventCall[]
  bookedCalls           Orchestration[]
  type                  ContactMessageType @default(AVAILABILITY)
  status                ContactMessageStatus @default(NOTCONTACTED)
  emailStatus           EmailStatus?
}

model ContactEventCall {
  id                   String            @id @default(cuid())
  callId  Int
  call Call @relation(fields: [callId], references: [id], onDelete: Cascade)
  status ContactEventCallStatus
  contactMessageId Int 
  contactMessage ContactMessage @relation(fields: [contactMessageId], references: [id], onDelete: Cascade)
}

enum ContactEventCallStatus {
  TOOFFER
  TOCHECK
  OFFERING
  CHECKING
  ACCEPTED
  DECLINED
  AVAILABLE
}

enum ContactMessageType {
  BOOKING
  AVAILABILITY
  AUTOBOOK
}

enum ContactMessageStatus {
  ACCEPTED//
  DECLINED//
  RESPONDED
  NOTCONTACTED//
  AWAITINGREPLY//
  AVAILABLE//
  MIXED//
  AUTOBOOKED//
  ERROR
  FINDINGDEP
  CANCELLED
}

model Ensemble {
  name                 String            @unique
  id                   String            @id @default(cuid())
  ensembleNames        String[]
  subscriptionStatus   String?
  stripeCustomerId     String?
  stripeSubscriptionId String?           @unique
  adminInvites         AdminInvite[]
  admin                EnsembleAdmin[]
  contacts             EnsembleContact[]
  sections             EnsembleSection[]
  events               Event[]
}

model EnsembleAdmin {
  id            String   @id @default(cuid())
  ensembleId    String
  userId        String
  positionTitle String
  accessType    AccessType   @default(FULL)
  ensemble      Ensemble @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id])
}

model EnsembleSection {
  id         String            @id @default(cuid())
  name       SectionName
  ensembleId String
  contacts   EnsembleContact[]
  ensemble   Ensemble          @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  events     EventSection[]
}

enum SectionName {
  FLUTE
  OBOE
  CLARINET
  BASSOON
  HORN
  TRUMPET
  TROMBONE
  TUBA
  TIMPANI
  PERCUSSION
  ORGAN
  PIANO
  VIOLIN1
  VIOLIN2
  VIOLA
  CELLO
  DOUBLEBASS
}

model EnsembleContact {
  id              String           @id @default(cuid())
  ensembleId      String
  email           String?
  phoneNumber     String?
  firstName       String
  lastName        String
  role            String
  category        String?
  sectionId       String
  status          String           @default("OK")
  indexNumber     Int              @default(0)
  contactMessages ContactMessage[]
  ensemble        Ensemble         @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  section         EnsembleSection  @relation(fields: [sectionId], references: [id])
}

model AdminInvite {
  id            String   @id @default(cuid())
  ensembleId    String
  accepted      Boolean?
  firstName     String
  lastName      String
  email         String
  positionTitle String
  accessType    AccessType   @default(RESTRICTED)
  senderName    String
  ensemble      Ensemble @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
}

enum AccessType {
  FULL
  RESTRICTED
}

model SentEmail {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  email     String
  subject   String
  bodyText  String
  status    EmailStatus @default(PROCESSED)
  eventId   Int
  timestamp DateTime
  event     Event       @relation(fields: [eventId], references: [id])
}

enum EmailStatus {
  PROCESSED
  DELIVERED
  OPEN
  CLICK
  BOUNCE
}
