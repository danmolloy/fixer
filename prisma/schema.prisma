datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  //previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}


model Account {
  id                        String  @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?  @db.Text
  access_token              String?  @db.Text
  expires_at                Int?
  refresh_token_expires_in  Int?
  token_type                String?
  scope                     String?
  id_token                  String?  @db.Text
  session_state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  image         String?
  email         String?   @unique
  emailVerified DateTime? 
  firstName     String?
  lastName      String?
  mobileNumber  String?
  instrumentsList String[] 
  preferredMethod String? //
  fixingEnsembles String[] //
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  calls         Call[]
  admins EnsembleAdmin[]
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Event {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  ensembleId         String
  ensembleName       String 
  ensemble           Ensemble @relation(fields: [ensembleId], references: [id])
  eventTitle         String 
  concertProgram     String
  confirmedOrOnHold  String @default("On Hold")
  calls              Call[]
  dressCode          String
  fee                String
  additionalInfo     String?
  //instrumentSections EventInstrument[]
  sections           EventSection[]
  //fixerEmail         String
  fixerId            String//
  fixer              User     @relation(fields: [fixerId], references: [id])//
  fixerName          String?//
  //fixer              User     @relation(fields: [fixerEmail], references: [email])
}

model Call {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  startTime          DateTime
  endTime            DateTime
  venue              String
  eventId            Int 
  event              Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  fixerId           String
  fixer              User     @relation(fields: [fixerId], references: [id])
  contactMessages    ContactMessage[]
}

model EventSection {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  event              Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId            Int 
  ensembleSectionId  String
  ensembleSection    EnsembleSection @relation(fields: [ensembleSectionId], references: [id], onDelete: Cascade)
  bookingStatus      String @default("active")
  numToBook          Int
  contacts           ContactMessage[]
  //messageToAll     String
}

model ContactMessage {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  //eventInstrument    EventInstrument     @relation(fields: [eventInstrumentId], references: [id], onDelete: Cascade)
  contact            EnsembleContact    @relation(fields: [contactId], references: [id])
  recieved           Boolean @default(false)
  recievedDate       DateTime?
  accepted           Boolean? 
  acceptedDate       DateTime?
  contactId          String //@default("clg6usgbg0000l80846i92lbb")
  //eventInstrumentId  Int
  playerMessage      String?
  calls             Call[]
  eventSectionId    Int
  eventSection      EventSection @relation(fields: [eventSectionId], references: [id], onDelete: Cascade)
  indexNumber       Int
  bookingOrAvailability String @default ("Booking")
  offerExpiry       Int?
  status            String @default("OK")
  position        String @default("Tutti")
  //strictlyTied    Boolean
}

model Ensemble {
  name String @unique
  ensembleNames String[]
  id String @id @default(cuid())
  sections EnsembleSection[]
  admin EnsembleAdmin[]
  adminInvites AdminInvite[]
  events Event[]
  contacts EnsembleContact[]
  stripeCustomerId   String? 
  stripeSubscriptionId String?
  subscriptionStatus String?  
}

model EnsembleAdmin {
  id String @id @default(cuid())
  ensembleId String
  accessType String @default("full")
  userId String 
  ensemble Ensemble @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  positionTitle String
  user User @relation(fields: [userId], references: [id])
}

model EnsembleSection {
  id String @id @default(cuid())
  name String
  ensembleId String
  ensemble Ensemble @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  events  EventSection[]
  contacts EnsembleContact[]
}


model EnsembleContact {
  id String @id @default(cuid())
  status String @default("OK")
  ensembleId String
  indexNumber Int @default(0)
  email String?
  phoneNumber String?
  firstName String
  lastName String
  role String
  sectionId String
  section EnsembleSection @relation(fields: [sectionId], references: [id])
  category String? 
  ensemble Ensemble @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  contactMessages ContactMessage[]
}

model AdminInvite {
  id String @id @default(cuid())
  ensembleId String
  ensemble Ensemble @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  accepted Boolean?
  firstName String
  lastName String
  email String
  positionTitle String
  accessType String @default("restricted")
}